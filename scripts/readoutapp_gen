#!/usr/bin/env python3

import json
import os
import math
import sys
import glob
import rich.traceback
from rich.console import Console
from os.path import exists, join
from daqconf.core.system import System
from daqconf.core.conf_utils import make_app_command_data
from daqconf.core.metadata import write_metadata_file

# Add -h as default help option
CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])

console = Console()

import click


@click.command(context_settings=CONTEXT_SETTINGS)
@click.option(
    "-f",
    "--frontend-type",
    type=click.Choice(["wib", "wib2", "pds_queue", "pds_list"], case_sensitive=True),
    default="wib",
)
@click.option("-n", "--number-of-data-producers", default=1)
@click.option("-t", "--number-of-tp-producers", default=0)
@click.option("-s", "--data-rate-slowdown-factor", default=10)
@click.option("-g", "--enable-software-tpg", is_flag=True)
@click.option("-m", "--channel-map-name", default="ProtoDUNESP1ChannelMap")
@click.option("-c", "--fwtp_stitch_constant", default=1600)
@click.option("-d", "--data-file", type=click.Path(), default="./frames.bin")
@click.option("--tp-data-file", type=click.Path(), default="./tp_frames.bin")
@click.option(
    "--opmon-impl",
    type=click.Choice(["json", "cern", "pocket"], case_sensitive=False),
    default="json",
    help="Info collector service implementation to use",
)
@click.option(
    "--ers-impl",
    type=click.Choice(["local", "cern", "pocket"], case_sensitive=False),
    default="local",
    help="ERS destination (Kafka used for cern and pocket)",
)
@click.option(
    "--pocket-url", default="127.0.0.1", help="URL for connecting to Pocket services"
)
@click.option("--host", default="localhost", help="Host to run app on")
@click.argument("json_dir", type=click.Path())
def cli(
    frontend_type,
    number_of_data_producers,
    number_of_tp_producers,
    data_rate_slowdown_factor,
    enable_software_tpg,
    channel_map_name,
    fwtp_stitch_constant,
    data_file,
    tp_data_file,
    opmon_impl,
    ers_impl,
    pocket_url,
    json_dir,
    host
):

    if exists(json_dir):
        raise RuntimeError(f"Directory {json_dir} already exists")

    console.log("Loading app_confgen config generator")
    from readoutmodules import app_confgen

    the_system = System()

    if opmon_impl == "cern":
        info_svc_uri = "influx://opmondb.cern.ch:31002/write?db=influxdb"
    elif opmon_impl == "pocket":
        info_svc_uri = "influx://" + pocket_url + ":31002/write?db=influxdb"
    else:
        info_svc_uri = "file://info_${APP_NAME}_${APP_PORT}.json"

    ers_settings = dict()

    if ers_impl == "cern":
        use_kafka = True
        ers_settings[
            "INFO"
        ] = "erstrace,throttle,lstdout,erskafka(monkafka.cern.ch:30092)"
        ers_settings[
            "WARNING"
        ] = "erstrace,throttle,lstdout,erskafka(monkafka.cern.ch:30092)"
        ers_settings[
            "ERROR"
        ] = "erstrace,throttle,lstdout,erskafka(monkafka.cern.ch:30092)"
        ers_settings["FATAL"] = "erstrace,lstdout,erskafka(monkafka.cern.ch:30092)"
    elif ers_impl == "pocket":
        use_kafka = True
        ers_settings["INFO"] = (
            "erstrace,throttle,lstdout,erskafka(" + pocket_url + ":30092)"
        )
        ers_settings["WARNING"] = (
            "erstrace,throttle,lstdout,erskafka(" + pocket_url + ":30092)"
        )
        ers_settings["ERROR"] = (
            "erstrace,throttle,lstdout,erskafka(" + pocket_url + ":30092)"
        )
        ers_settings["FATAL"] = "erstrace,lstdout,erskafka(" + pocket_url + ":30092)"
    else:
        use_kafka = False
        ers_settings["INFO"] = "erstrace,throttle,lstdout"
        ers_settings["WARNING"] = "erstrace,throttle,lstdout"
        ers_settings["ERROR"] = "erstrace,throttle,lstdout"
        ers_settings["FATAL"] = "erstrace,lstdout"

    # add app
    the_system.apps["readout_app"] = app_confgen.generate(FRONTEND_TYPE=frontend_type,
    NUMBER_OF_DATA_PRODUCERS=number_of_data_producers,
    NUMBER_OF_TP_PRODUCERS=number_of_tp_producers,
    DATA_RATE_SLOWDOWN_FACTOR=data_rate_slowdown_factor,
    ENABLE_SOFTWARE_TPG=enable_software_tpg,
    CHANNEL_MAP_NAME=channel_map_name,
    FWTP_STITCH_CONSTANT=fwtp_stitch_constant,
    DATA_FILE=data_file,
    TP_DATA_FILE=tp_data_file,
    HOST=host)

    ####################################################################
    # Application command data generation
    ####################################################################

    # Arrange per-app command data into the format used by util.write_json_files()
    app_command_datas = {
        name: make_app_command_data(the_system, app, name)
        for name, app in the_system.apps.items()
    }

    # Make boot.json config
    from daqconf.core.conf_utils import (
        make_system_command_datas,
        generate_boot_common,

        write_json_files,
    )

    system_command_datas = make_system_command_datas(the_system)

    boot = generate_boot_common(
        ers_settings = ers_settings,
        info_svc_uri = info_svc_uri,
        disable_trace = False,
        use_kafka = use_kafka,
        external_connections = [],
        daq_app_exec_name = "daq_application_ssh",
        verbose = False,
    )

    from daqconf.core.conf_utils import update_with_ssh_boot_data
    console.log("Generating ssh boot.json")
    update_with_ssh_boot_data(
        boot_data = boot,
        apps = the_system.apps,
        base_command_port = 3333,
        verbose = False,
    )

    system_command_datas["boot"] = boot

    write_json_files(app_command_datas, system_command_datas, json_dir, verbose=True)

    console.log(f"Readout app config generated in {json_dir}")

    write_metadata_file(json_dir, "readoutapp_gen")


if __name__ == "__main__":
    try:
        cli(show_default=True, standalone_mode=True)
    except Exception as e:
        console.print_exception()
()
